name: Multi-Platform Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  linux_build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential musl-tools musl-dev gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf libc6-dev-arm64-cross libc6-dev-armhf-cross

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-index-

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl,aarch64-unknown-linux-musl,armv7-unknown-linux-musleabihf

      - name: Install cross-rs for cross-compilation
        run: cargo install cross

      - name: Build x86_64 binary
        run: cargo build --target-dir=build --release --verbose --target=x86_64-unknown-linux-musl --features "syntax-highlighting"

      - name: Build aarch64 binary
        run: |
          cross build --target-dir=build --release --verbose --target=aarch64-unknown-linux-musl --features "syntax-highlighting"
          mv ./build/aarch64-unknown-linux-musl/release/osutil ./build/aarch64-unknown-linux-musl/release/osutil-aarch64

      - name: Build armv7 binary
        run: |
          cross build --target-dir=build --release --verbose --target=armv7-unknown-linux-musleabihf --features "syntax-highlighting"
          mv ./build/armv7-unknown-linux-musleabihf/release/osutil ./build/armv7-unknown-linux-musleabihf/release/osutil-armv7l

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries
          path: |
            ./build/x86_64-unknown-linux-musl/release/osutil
            ./build/aarch64-unknown-linux-musl/release/osutil-aarch64
            ./build/armv7-unknown-linux-musleabihf/release/osutil-armv7l

  windows_build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-index-

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cross-compilation targets
        run: |
          rustup target add x86_64-pc-windows-gnu

      - name: Install Windows cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64

      - name: Build for Windows
        run: cargo build --release --target x86_64-pc-windows-gnu --no-default-features

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-binary
          path: target/x86_64-pc-windows-gnu/release/osutil.exe

  build-macos:
    runs-on: macos-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-index-

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install macOS targets
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Build for macOS (x86_64)
        run: cargo build --release --target x86_64-apple-darwin --features "syntax-highlighting"

      - name: Build for macOS (ARM)
        run: cargo build --release --target aarch64-apple-darwin --features "syntax-highlighting"



      - name: Create universal macOS binary
        run: |
          # Create a universal binary that works on both Intel and ARM
          lipo -create \
            target/x86_64-apple-darwin/release/osutil \
            target/aarch64-apple-darwin/release/osutil \
            -output target/release/osutil

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-binary
          path: target/release/osutil

  release:
    needs: [linux_build, windows_build, build-macos]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Extract version from tag
        id: extract_version
        run: |
          version=${GITHUB_REF#refs/tags/v}
          echo "version=$version" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ steps.extract_version.outputs.version }}
          body: |
            ## Downloads
            
            ### Linux (Multiple Architectures)
            - **x86_64**: `osutil` (x86_64 Linux)
            - **aarch64**: `osutil-aarch64` (ARM64 Linux)
            - **armv7l**: `osutil-armv7l` (ARMv7 Linux)
            
            ### macOS
            - **Universal**: `osutil-macos` (Intel & ARM)
            
            ### Windows
            - **x86_64**: `osutil-windows.exe` (Windows)
            
            ## Installation
            
            ### Linux
            ```bash
            sh <(curl -fsSL https://raw.githubusercontent.com/ChrisTitusTech/osutil/main/install-linux.sh)
            ```
            
            ### macOS
            ```bash
            bash <(curl -fsSL https://raw.githubusercontent.com/ChrisTitusTech/osutil/main/install-macos.sh)
            ```
            
            ### Windows
            ```powershell
            irm https://raw.githubusercontent.com/ChrisTitusTech/osutil/main/install-windows.ps1 | iex
            ```

          files: |
            linux-binaries/osutil
            linux-binaries/osutil-aarch64
            linux-binaries/osutil-armv7l
            macos-binary/osutil
            windows-binary/osutil.exe
            install-linux.sh
            install-macos.sh
            install-windows.ps1
            start.sh
            startdev.sh
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
