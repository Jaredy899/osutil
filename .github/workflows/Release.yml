name: Multi-Platform Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  linux_build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential musl-tools musl-dev gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf libc6-dev-arm64-cross libc6-dev-armhf-cross

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-index-

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl,aarch64-unknown-linux-musl,armv7-unknown-linux-musleabihf

      - name: Install cross-rs for cross-compilation
        run: cargo install cross

      - name: Build x86_64 binary (musl)
        run: cargo build --release --target=x86_64-unknown-linux-musl --all-features

      - name: Build aarch64 binary (musl)
        run: |
          cross build --release --target=aarch64-unknown-linux-musl --all-features
          mv target/aarch64-unknown-linux-musl/release/osutil target/aarch64-unknown-linux-musl/release/osutil-aarch64

      - name: Build armv7 binary (musl)
        run: |
          cross build --release --target=armv7-unknown-linux-musleabihf --all-features
          mv target/armv7-unknown-linux-musleabihf/release/osutil target/armv7-unknown-linux-musleabihf/release/osutil-armv7l

      - name: Prepare Linux binaries for upload
        run: |
          mkdir -p linux-binaries
          cp target/x86_64-unknown-linux-musl/release/osutil linux-binaries/
          cp target/aarch64-unknown-linux-musl/release/osutil-aarch64 linux-binaries/
          cp target/armv7-unknown-linux-musleabihf/release/osutil-armv7l linux-binaries/

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries
          path: linux-binaries/

  windows_build:
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-index-

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc
          override: true

      - name: Add ARM64 target
        run: rustup target add aarch64-pc-windows-msvc

      - name: Configure Rust flags
        shell: pwsh
        run: |
            if (!(Test-Path .cargo)) { New-Item -ItemType Directory -Path .cargo | Out-Null }
            @"
            [target.x86_64-pc-windows-msvc]
            rustflags = ["-C","target-feature=+crt-static"]
        
            [target.aarch64-pc-windows-msvc]
            rustflags = ["-C","target-feature=+crt-static"]
            "@ | Set-Content .cargo/config.toml -Encoding utf8

      - name: MSVC env for x64
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          
      - name: Build x64
        run: cargo build --release --target x86_64-pc-windows-msvc --all-features
  
      - name: MSVC env for ARM64 cross
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64_arm64
          
      - name: Build ARM64
        run: cargo build --release --target aarch64-pc-windows-msvc --all-features
          
      - name: Prepare Windows binaries for upload
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path windows-binaries -Force | Out-Null
          Copy-Item target/x86_64-pc-windows-msvc/release/osutil.exe windows-binaries/osutil-windows-x64.exe
          Copy-Item target/aarch64-pc-windows-msvc/release/osutil.exe windows-binaries/osutil-windows-arm64.exe
          
      - name: Upload Windows MSVC artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-msvc-binary
          path: windows-binaries/



  build-macos:
    runs-on: macos-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-index-

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install macOS targets
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Build for macOS (x86_64)
        run: cargo build --release --target x86_64-apple-darwin --all-features

      - name: Build for macOS (ARM)
        run: cargo build --release --target aarch64-apple-darwin --all-features

      - name: Create universal macOS binary
        run: |
          lipo -create \
            target/x86_64-apple-darwin/release/osutil \
            target/aarch64-apple-darwin/release/osutil \
            -output target/release/osutil

      - name: Prepare macOS binary for upload
        run: |
          mkdir -p macos-binaries
          cp target/release/osutil macos-binaries/osutil-macos

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-binary
          path: macos-binaries/

  release:
    needs: [linux_build, windows_build, build-macos]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Extract version from tag
        id: extract_version
        run: |
          version=${GITHUB_REF#refs/tags/v}
          echo "version=$version" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ steps.extract_version.outputs.version }}
          body: |
            ## Downloads
            
            ### Linux (musl binaries)
            - **x86_64**: `osutil` (x86_64 Linux)
            - **aarch64**: `osutil-aarch64` (ARM64 Linux)
            - **armv7l**: `osutil-armv7l` (ARMv7 Linux)
            
            ### macOS
            - **Universal**: `osutil-macos` (Intel & ARM)
            
            ### Windows
            - **x86_64**: `osutil-windows-x64.exe` (Windows x64 - No external dependencies)
            - **ARM64**: `osutil-windows-arm64.exe` (Windows ARM64 - No external dependencies)
            
            ## Installation
            
            ### macOS & Linux
            ```bash
            sh <(curl -fsSL https://raw.githubusercontent.com/Jaredy899/osutil/main/install.sh)
            ```
            
            ### Windows
            ```powershell
            irm https://raw.githubusercontent.com/Jaredy899/osutil/main/install-windows.ps1 | iex
            ```

          files: |
            linux-binaries/osutil
            linux-binaries/osutil-aarch64
            linux-binaries/osutil-armv7l
            macos-binary/osutil-macos
            windows-msvc-binary/osutil-windows-x64.exe
            windows-msvc-binary/osutil-windows-arm64.exe
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
